%YAML 1.1
%TAG !u! tag:unity3d.com,2011:
--- !u!114 &11400000
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: 3acd6fe57257048db802c1c4c2b75248, type: 3}
  m_Name: New Generator
  m_EditorClassIdentifier: 
  shaderName: MainMarcher
  shaderReference: {fileID: 4800000, guid: 898acee1b87f6d84e8bc397c06f4e894, type: 3}
  shaderTemplate: uRaymarching/UniversalRP/Unlit
  variables:
  - key: Name
    value: MainMarcher
  - key: LOD
    value: 200
  - key: LightModel
    value: Standard
  - key: Option
    value: 
  - key: SurfaceFunctionInput
    value: SurfaceOutputStandard
  - key: RenderType
    value: Opaque
  - key: RenderQueue
    value: Geometry
  - key: ObjectShape
    value: NONE
  - key: RaymarchingShaderDirectory
    value: Assets\uRaymarching\Runtime\Shaders\Include\UniversalRP
  conditions:
  - key: UseTesselation
    value: 0
  - key: ShadowCaster
    value: 1
  - key: WorldSpace
    value: 1
  - key: ObjectScale
    value: 0
  - key: CheckIfInsideObject
    value: 1
  - key: RayStopsAtDepthTexture
    value: 0
  - key: RayStartsFromDepthTexture
    value: 0
  blocks:
  - key: SurfaceFunction
    value: 'fixed4 c = tex2D (_MainTex, IN.uv_MainTex) * _Color;

      o.Albedo
      = c.rgb;

      o.Metallic = _Metallic;

      o.Smoothness = _Glossiness;

      o.Alpha
      = c.a;

      o.Normal = UnpackNormal(tex2D(_NormalTex, IN.uv_MainTex));'
    folded: 0
  - key: Properties
    value: '[Header(Additional Properties)]

      _Smooth("Smooth", float) = 1.0

      [HDR]_EnvironmentColorUp("Environment
      Color Up", Color) = (1.0, 1.0, 1.0, 1.0)

      [HDR]_EnvironmentColorDown("Environment
      Color Down", Color) = (1.0, 1.0, 1.0, 1.0)

      [HDR]_PlayerColor("Player
      Color", Color) = (1.0, 1.0, 1.0, 1.0)


      [Header(Custom Lighting)]

      _SurfaceSmoothness("Smoothness",
      float) = .5

      _AmbientOcclusion("Ambient Occlusion", float) = .5


      _AmbientIntensity("Ambient
      Intensity", float) = 0.


      _EdgePower("Edge Power", float) = 0.

      _ShadowPower("Shadow
      Power", float) = 0.

      _FresnelStrength("Fresnel Strength", float) = 0.


      _CellAmount("Cell
      Amount", float) = 0.

      _SpecularStrength("Specular Strength", float) =
      0.

      _PosterizeSteps("Posterize Steps", float) = 0.'
    folded: 0
  - key: DistanceFunction
    value: "float4x4 _Plane;\nfloat4x4 _Sphere;\nfloat4x4 _Player;\n\nfloat _Smooth;\n\nfloat
      _Speed = 0;\nfloat _MaxSpeed = 1;\n\ninline float ComputeTerrain(float3 wpos)\n{\n   
      float normalizedSpeed = Remap(_Speed / _MaxSpeed, 0., 1., 0., 0.4);\n\n   
      float hNormal = dot(sin(wpos*.0173), cos(wpos.zxy*.0191))*30;\n    float h
      = dot(sin(wpos*.0173*(sin(_Time * 0.1)/3. + 1.0)),cos(wpos*.0191*(sin(_Time
      * 0.1)/3. + 1.0)))*30;\n    float h2 = pow(h, 2.0);\n\n    float d = hNormal
      + sin(wpos.y*.03)/3;\n    float d2 = h2/10. + sin(wpos.y*.3)/3;\n\n    float
      tunnel = 15. - length(wpos.xy)-hNormal;\n\n    return lerp(smax(d, tunnel,
      80.), smax(d2, tunnel, 80.), normalizedSpeed);\n}\n\n\ninline float DistanceFunction(float3
      wpos)\n{\n    float4 playerPos = mul(_Player, float4(wpos, 1.0));\n    float
      playerSphere = Sphere(playerPos, 15.);\n\n    return smax(-playerSphere, ComputeTerrain(wpos),
      _Smooth);\n}"
    folded: 1
  - key: PostEffect
    value: "float4 _PlayerColor;\nfloat4 _EnvironmentColorUp;\nfloat4 _EnvironmentColorDown;\n\ninline
      float3 PostEffect(RaymarchInfo ray, inout PostEffectOutput o)\n{\n    float3
      wpos = ray.endPos;\n    float3 normalWS = DecodeNormalWS(ray.normal);\n\n\n   
      float4 playerPos = mul(_Player, float4(wpos, 1.0));\n    float playerSphere
      = Sphere(playerPos, 15.);\n\n    float terrain = ComputeTerrain(wpos);\n\n   
      float upPointing = saturate(dot(float3(0., 1., 0.), normalWS));\n    float
      downPointing = saturate(dot(float3(0., -1., 0.), normalWS));\n    \n    o =
      upPointing * _EnvironmentColorUp + downPointing * _EnvironmentColorDown;\n\n\n   
      float ao = 1.0 - pow(1.0 * ray.loop / ray.maxLoop, 2);\n    o.rgb *= ao;\n   
      o.a *= pow(ao, 5);\n\n    return o.rgb;\n\n    // float h = dot(sin(wpos*.0173),cos(wpos.zxy*.0191))*30.;\n\n   
      // float2 a = normalize(saturate(float2(1.0 / h, 1.0 / playerSphere)));\n   
      // o *=   // remove normalize when found issue of smax lighting thing\n   
      //     a.x * _EnvironmentColor + \n    //     a.y * _PlayerColor;\n\n}"
    folded: 1
  constants: {fileID: 11400000, guid: 3fc7bca6894034dec9dc046eade7d602, type: 2}
  basicFolded: 1
  conditionsFolded: 1
  variablesFolded: 1
  materialsFolded: 0
  constantsFolded: 0
