%YAML 1.1
%TAG !u! tag:unity3d.com,2011:
--- !u!114 &11400000
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: 3acd6fe57257048db802c1c4c2b75248, type: 3}
  m_Name: New Generator
  m_EditorClassIdentifier: 
  shaderName: MainMarcher
  shaderReference: {fileID: 4800000, guid: 898acee1b87f6d84e8bc397c06f4e894, type: 3}
  shaderTemplate: uRaymarching/UniversalRP/Unlit
  variables:
  - key: Name
    value: MainMarcher
  - key: LOD
    value: 200
  - key: LightModel
    value: Standard
  - key: Option
    value: 
  - key: SurfaceFunctionInput
    value: SurfaceOutputStandard
  - key: RenderType
    value: Opaque
  - key: RenderQueue
    value: Geometry
  - key: ObjectShape
    value: NONE
  - key: RaymarchingShaderDirectory
    value: Assets\uRaymarching\Runtime\Shaders\Include\UniversalRP
  conditions:
  - key: UseTesselation
    value: 0
  - key: ShadowCaster
    value: 1
  - key: WorldSpace
    value: 1
  - key: ObjectScale
    value: 0
  - key: CheckIfInsideObject
    value: 1
  - key: RayStopsAtDepthTexture
    value: 0
  - key: RayStartsFromDepthTexture
    value: 0
  blocks:
  - key: SurfaceFunction
    value: 'fixed4 c = tex2D (_MainTex, IN.uv_MainTex) * _Color;

      o.Albedo
      = c.rgb;

      o.Metallic = _Metallic;

      o.Smoothness = _Glossiness;

      o.Alpha
      = c.a;

      o.Normal = UnpackNormal(tex2D(_NormalTex, IN.uv_MainTex));'
    folded: 0
  - key: Properties
    value: '[Header(Additional Properties)]

      _Smooth("Smooth", float) = 1.0

      [HDR]_PlaneColor("Plane
      Color", Color) = (1.0, 1.0, 1.0, 1.0)

      [HDR]_SphereColor("Sphere Color",
      Color) = (1.0, 1.0, 1.0, 1.0)'
    folded: 0
  - key: DistanceFunction
    value: "float4x4 _Plane;\nfloat4x4 _Sphere;\nfloat4x4 _Player;\n\nfloat _Smooth;\n\ninline
      float DistanceFunction(float3 wpos)\n{\n    float4 pPos = mul(_Plane, float4(wpos,
      1.0));\n    float4 sPos = mul(_Sphere, float4(wpos, 1.0));\n    float4 playerPos
      = mul(_Player, float4(wpos, 1.0));\n    float p = Plane(pPos, float3(0, 1,
      0));\n    float s = Sphere(sPos, 50.);\n    float playerSphere = Sphere(playerPos,
      15.);\n\n    return smax(-playerSphere, smin(p, s, _Smooth), _Smooth);\n}"
    folded: 1
  - key: PostEffect
    value: "float4 _PlaneColor;\nfloat4 _SphereColor;\n\ninline void PostEffect(RaymarchInfo
      ray, inout PostEffectOutput o)\n{\n    float3 wpos = ray.endPos;\n    float4
      pPos = mul(_Plane, float4(wpos, 1.0));\n    float4 sPos = mul(_Sphere, float4(wpos,
      1.0));\n    float p = Plane(pPos, float3(0, 1, 0));\n    float s = Sphere(sPos,
      1.);\n    float2 a = normalize(saturate(float2(1.0 / p, 1.0 / s)));\n    o
      *=  // remove normalize when found issue of smax lighting thing\n        a.x
      * _PlaneColor +\n        a.y * _SphereColor;\n}"
    folded: 1
  constants: {fileID: 11400000, guid: 3fc7bca6894034dec9dc046eade7d602, type: 2}
  basicFolded: 1
  conditionsFolded: 1
  variablesFolded: 1
  materialsFolded: 0
  constantsFolded: 0
